"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Electrolizer = exports.ElectrolizerType = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _electron = require("electron");

var _drivers = require("./drivers");

var ElectrolizerType;
exports.ElectrolizerType = ElectrolizerType;

(function (ElectrolizerType) {
  ElectrolizerType["webview"] = "webview";
  ElectrolizerType["browserView"] = "browserView";
  ElectrolizerType["browserWindow"] = "browserWindow";
})(ElectrolizerType || (exports.ElectrolizerType = ElectrolizerType = {}));

class Electrolizer {
  constructor(bus) {
    this.bus = bus;
    (0, _defineProperty2.default)(this, "interactionReady", false);
    (0, _defineProperty2.default)(this, "queue", []);
    (0, _defineProperty2.default)(this, "driver", void 0);
    (0, _defineProperty2.default)(this, "cookies", {
      clearAll: () => {
        this._queue(() => this.driver.cookies.clearAll());

        return this;
      },
      get: arg => {
        return this.driver.cookies.get(arg);
      },
      set: (name, value) => {
        //@ts-ignore
        this._queue(() => this.driver.cookies.set(name, value));

        return this;
      },
      clear: name => {
        this._queue(() => this.driver.cookies.clear(name));

        return this;
      }
    });
    this.setupDriver();
  }

  setupDriver() {
    switch (this.busType) {
      case ElectrolizerType.webview:
        this.driver = new _drivers.WebviewTagDriver(this.bus);
        break;

      case ElectrolizerType.browserWindow:
        this.driver = new _drivers.BrowserWindowDriver(this.bus);
        break;

      case ElectrolizerType.browserView:
        this.driver = new _drivers.BrowserViewDriver(this.bus);
        break;
    }
  }

  get busType() {
    try {
      var instanceOfTest = this.bus instanceof _electron.BrowserView;
    } catch (error) {
      return ElectrolizerType.webview;
    }

    if (this.bus instanceof _electron.BrowserView) {
      return ElectrolizerType.browserView;
    }

    if (this.bus instanceof _electron.BrowserWindow) {
      return ElectrolizerType.browserWindow;
    }

    return ElectrolizerType.webview;
  }

  _queue(fn) {
    this.queue.push(fn);
  }

  goto(url, headers) {
    this._queue(this.driver.goto.bind(this.driver, url, headers));

    return this;
  }

  back() {
    this._queue(this.driver.back.bind(this.driver));

    return this;
  }

  forward() {
    this._queue(this.driver.forward.bind(this.driver));

    return this;
  }

  refresh() {
    this._queue(this.driver.refresh.bind(this.driver));

    return this;
  }

  click(selector) {
    this._queue(this.driver.click.bind(this.driver, selector));

    return this;
  }

  mousedown(selector) {
    this._queue(this.driver.mousedown.bind(this.driver, selector));

    return this;
  }

  mouseup(selector) {
    this._queue(this.driver.mouseup.bind(this.driver, selector));

    return this;
  }

  mouseover(selector) {
    this._queue(this.driver.mouseover.bind(this.driver, selector));

    return this;
  }

  mouseout(selector) {
    this._queue(this.driver.mouseout.bind(this.driver, selector));

    return this;
  }

  type(selector, text) {
    this._queue(this.driver.type.bind(this.driver, selector, text));

    return this;
  }

  insert(selector, text) {
    this._queue(this.driver.insert.bind(this.driver, selector, text));

    return this;
  }

  check(selector) {
    this._queue(this.driver.check.bind(this.driver, selector));

    return this;
  }

  uncheck(selector) {
    this._queue(this.driver.uncheck.bind(this.driver, selector));

    return this;
  }

  select(selector, option) {
    this._queue(this.driver.select.bind(this.driver, selector, option));

    return this;
  }

  scrollTo(top, left) {
    this._queue(this.driver.scrollTo.bind(this.driver, top, left));

    return this;
  }

  viewport(width, height) {
    this._queue(this.driver.viewport.bind(this.driver, width, height));

    return this;
  }

  inject(type, file) {
    this._queue(this.driver.inject.bind(this.driver, type, file));

    return this;
  }

  exists(selector) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this.run();
      return yield _this.driver.exists(selector);
    })();
  }

  html() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this2.run();
      return yield _this2.driver.html();
    })();
  }

  evaluate(fn) {
    var _arguments = arguments,
        _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      for (var _len = _arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = _arguments[_key];
      }

      yield _this3.run();
      return _this3.driver.evaluate_now(fn, ...args);
    })();
  }

  wait() {
    //@ts-ignore
    this._queue(() => this.driver.wait.apply(this.driver, arguments));

    return this;
  }

  header(header, value) {
    return this;
  }

  authentication(username, password) {
    this._queue(this.driver.authentication.bind(this.driver, username, password));

    return this;
  }

  run() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      for (var block of _this4.queue) {
        try {
          yield block();
        } catch (error) {
          console.log("ERROR", error, block);
        }
      }

      _this4.queue = [];
    })();
  }

}

exports.Electrolizer = Electrolizer;
var _default = Electrolizer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,