"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Electrolizer = exports.ElectrolizerType = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _drivers = require("./drivers");

var ElectrolizerType;
exports.ElectrolizerType = ElectrolizerType;

(function (ElectrolizerType) {
  ElectrolizerType["webview"] = "webview";
  ElectrolizerType["browserView"] = "browserView";
  ElectrolizerType["browserWindow"] = "browserWindow";
})(ElectrolizerType || (exports.ElectrolizerType = ElectrolizerType = {}));

class Electrolizer {
  constructor(bus) {
    this.bus = bus;
    (0, _defineProperty2.default)(this, "_queue", []);
    (0, _defineProperty2.default)(this, "driver", void 0);
    (0, _defineProperty2.default)(this, "cookies", {
      clearAll: () => {
        this.queue(() => this.driver.cookies.clearAll());
        return this;
      },
      get: arg => {
        return this.driver.cookies.get(arg);
      },
      set: (name, value) => {
        //@ts-ignore
        this.queue(() => this.driver.cookies.set(name, value));
        return this;
      },
      clear: name => {
        this.queue(() => this.driver.cookies.clear(name));
        return this;
      }
    });
    this.setupDriver();
  }

  setupDriver() {
    switch (this.busType) {
      case ElectrolizerType.webview:
        this.driver = new _drivers.WebviewTagDriver(this.bus, this.busType);
        break;

      case ElectrolizerType.browserWindow:
        this.driver = new _drivers.BrowserWindowDriver(this.bus, this.busType);
        break;

      case ElectrolizerType.browserView:
        this.driver = new _drivers.BrowserViewDriver(this.bus, this.busType);
        break;
    }
  }

  get busType() {
    //@ts-ignore
    if (this.bus.hasOwnProperty('webContents') || !!this.bus.webContents || typeof this.bus.webContents !== "undefined") {
      return ElectrolizerType.browserWindow;
    }

    return ElectrolizerType.webview;
  }

  queue(fn) {
    this._queue.push(fn);
  }

  goto(url, headers) {
    this.queue(this.driver.goto.bind(this.driver, url, headers));
    return this;
  }

  back() {
    this.queue(this.driver.back.bind(this.driver));
    return this;
  }

  forward() {
    this.queue(this.driver.forward.bind(this.driver));
    return this;
  }

  refresh() {
    this.queue(this.driver.refresh.bind(this.driver));
    return this;
  }

  click(selector) {
    this.queue(this.driver.click.bind(this.driver, selector));
    return this;
  }

  mousedown(selector) {
    this.queue(this.driver.mousedown.bind(this.driver, selector));
    return this;
  }

  mouseup(selector) {
    this.queue(this.driver.mouseup.bind(this.driver, selector));
    return this;
  }

  mouseover(selector) {
    this.queue(this.driver.mouseover.bind(this.driver, selector));
    return this;
  }

  mouseout(selector) {
    this.queue(this.driver.mouseout.bind(this.driver, selector));
    return this;
  }

  focus(selector) {
    this.queue(this.driver.focus.bind(this.driver, selector));
    return this;
  }

  blur(selector) {
    this.queue(this.driver.focus.bind(this.driver, selector));
    return this;
  }

  type(selector, text) {
    this.queue(this.driver.type.bind(this.driver, selector, text));
    return this;
  }

  insert(selector, text) {
    this.queue(this.driver.insert.bind(this.driver, selector, text));
    return this;
  }

  check(selector) {
    this.queue(this.driver.check.bind(this.driver, selector));
    return this;
  }

  uncheck(selector) {
    this.queue(this.driver.uncheck.bind(this.driver, selector));
    return this;
  }

  select(selector, option) {
    this.queue(this.driver.select.bind(this.driver, selector, option));
    return this;
  }

  scrollTo(top, left) {
    this.queue(this.driver.scrollTo.bind(this.driver, top, left));
    return this;
  }

  viewport(width, height) {
    this.queue(this.driver.viewport.bind(this.driver, width, height));
    return this;
  }

  inject(type, file) {
    this.queue(this.driver.inject.bind(this.driver, type, file));
    return this;
  }

  exists(selector) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this.run();
      return yield _this.driver.exists(selector);
    })();
  }

  html() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this2.run();
      return yield _this2.driver.html();
    })();
  }

  evaluate(fn) {
    var _arguments = arguments,
        _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      for (var _len = _arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = _arguments[_key];
      }

      yield _this3.run();
      return _this3.driver.evaluate(fn, ...args);
    })();
  }

  url() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this4.run();
      return yield _this4.driver.url();
    })();
  }

  path() {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this5.run();
      return yield _this5.driver.path();
    })();
  }

  title() {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this6.run();
      return yield _this6.driver.title();
    })();
  }

  pdf(options) {
    var _this7 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this7.run();
      return yield _this7.driver.pdf(options);
    })();
  }

  screenshot(rect, options) {
    var _this8 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this8.run();
      return yield _this8.driver.screenshot(rect, options);
    })();
  }

  wait() {
    //@ts-ignore
    this.queue(() => this.driver.wait.apply(this.driver, arguments));
    return this;
  }

  header(header, value) {
    this.queue(this.driver.header.bind(this.driver, header, value));
    return this;
  }

  authentication(username, password) {
    this.queue(this.driver.authentication.bind(this.driver, username, password));
    return this;
  }

  useragent(useragent) {
    this.queue(this.driver.useragent.bind(this.driver, useragent));
    return this;
  }

  run() {
    var _this9 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      for (var block of _this9._queue) {
        yield block();
      }

      _this9._queue = [];
    })();
  }

  end() {
    var _this10 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this10.run();
    })();
  }

}

exports.Electrolizer = Electrolizer;
var _default = Electrolizer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,